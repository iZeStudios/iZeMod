plugins {
    id "java"
    id "idea"

    id "fabric-loom" version "1.10-SNAPSHOT"
}

allprojects {
    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "fabric-loom"

    base {
        group = project.maven_group
        archivesName = project.name
        version = project.maven_version
        description = project.maven_description
    }

    repositories {
        mavenCentral()
        maven {
            name = "ViaVersion"
            url = "https://repo.viaversion.com"
        }
        maven {
            name = "Lenni0451"
            url = "https://maven.lenni0451.net/everything"
        }
        maven {
            name = "OpenCollab Snapshots"
            url = "https://repo.opencollab.dev/maven-snapshots/"
        }
        maven {
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/releases"
        }
        maven {
            name = "Jitpack"
            url = "https://jitpack.io"

            content {
                includeGroup "com.github.Oryxel"
                includeGroup "com.github.iZeStudios"
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_version}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    }

    java {
        withSourcesJar()
        withJavadocJar()

        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }


    jar {
        // Rename the project's license file to LICENSE_<project_name> to avoid conflicts
        from("LICENSE") {
            rename {
                "${it}_${project.archivesBaseName}"
            }
        }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/izemod.accesswidener")
}

configurations {
    jij // jar in jar configuration
    modJij // jar in jar configuration for mods

    include.extendsFrom modJij
    modImplementation.extendsFrom modJij
    modCompileOnlyApi.extendsFrom modJij

    // Include VV dependencies as jij
    jij.extendsFrom vvDependencies
}

dependencies {
    modImplementation("com.viaversion:viafabricplus-api:4.0.3")
    include modRuntimeOnly("com.viaversion:viafabricplus:4.0.3")

    include implementation("com.github.iZeStudios:discord-ipc:b0d38c7edc")

    // Sub projects, since they are Fabric mods as well (mainly to access the game code) we have to first
    // implement the namedElements (raw output) to compile against, then include the mappedElements into the output jar
    implementation compileOnlyApi(project(path: ":izemod-api", configuration: "namedElements"))
    include project(":izemod-api")

    // Fabric's jar in jar system doesn't support transitive dependencies, so we have to manually add them
    afterEvaluate {
        configurations.jij.incoming.resolutionResult.allDependencies.each {
            dependencies.include(dependencies.implementation(dependencies.compileOnlyApi(it.requested.toString()) {
                transitive = false
            }))
        }
    }
}

processResources {
    filesMatching("fabric.mod.json") {
        expand(
                "version": project.version,
                "description": project.description,
                "mcVersion": mcVersion()
        )
    }
}

String mcVersion() {
    if (project.supported_versions.isEmpty()) {
        return project.minecraft_version
    } else {
        return project.supported_versions
    }
}

idea {
    module {
        ["run"].each {
            excludeDirs << file("$it")
        }
    }
}
